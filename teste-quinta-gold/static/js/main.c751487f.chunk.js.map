{"version":3,"sources":["config/Fire.js","Login.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","login","bind","assertThisInitialized","handleChange","state","email","password","e","preventDefault","auth","signInWithEmailAndPassword","then","u","catch","error","console","log","setState","defineProperty","target","name","value","react_default","a","createElement","className","htmlFor","onChange","type","id","aria-describedby","placeholder","onClick","Component","Home","chars","logout","addChar","_this2","database","ref","set","class","accForum","on","snapshot","val","_this$state","newChar","newClass","newAcc","char","child","remove","signOut","_this3","border","keys","length","map","i","key","removeChar","App","user","authListener","onAuthStateChanged","src_Home","src_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c751487f.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\nconst config = {\r\n    apiKey: 'AIzaSyCOPnldqeNy7EZQ3xt-JPzYRQ-zJm2700Y',\r\n    authDomain: 'fire-2f46b.firebaseapp.com',\r\n    databaseURL: 'https://fire-2f46b.firebaseio.com',\r\n    projectId: 'fire-2f46b',\r\n    storageBucket: 'fire-2f46b.appspot.com',\r\n    messagingSenderId: '877909970280'\r\n};\r\nconst fire = firebase.initializeApp(config);\r\n\r\nexport default fire;","import React, { Component } from 'react';\r\nimport fire from './config/Fire'\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // this.signup = this.signup.bind(this);\r\n        this.login = this.login.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.state = {\r\n            email: '',\r\n            password: ''\r\n        }\r\n    }\r\n\r\n    login(e) {\r\n        e.preventDefault();\r\n        fire\r\n            .auth()\r\n            .signInWithEmailAndPassword(this.state.email, this.state.password)\r\n            .then((u) => {\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    // signup(e) {\r\n    //     e.preventDefault();\r\n    //     fire\r\n    //         .auth()\r\n    //         .createUserWithEmailAndPassword(this.state.email, this.state.password)\r\n    //         .then((u) => {\r\n    //         })\r\n    //         .catch((error) => {\r\n    //             console.log(error);\r\n    //         });\r\n    // }\r\n\r\n    handleChange(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-md-6\">\r\n                <form>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleInputEmail\">Email address</label>\r\n                        <input\r\n                            value={this.state.email}\r\n                            onChange={this.handleChange}\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            className=\"form-control\"\r\n                            id=\"exampleInputEmail\"\r\n                            aria-describedby=\"emailHelp\"\r\n                            placeholder=\"Enter email\" />\r\n                        <small\r\n                            id=\"emailHelp\"\r\n                            className=\"form-text text-muted\">\r\n                            We'll never share your email with anyone else.\r\n                        </small>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleInputPassword1\">Password</label>\r\n                        <input\r\n                            value={this.state.password}\r\n                            onChange={this.handleChange}\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            className=\"form-control\"\r\n                            id=\"exampleInputPassword1\"\r\n                            placeholder=\"Password\" />\r\n                    </div>\r\n                    <button\r\n                        type=\"submit\"\r\n                        onClick={this.login}\r\n                        className=\"btn btn-primary\">\r\n                        Login\r\n                    </button>\r\n                    {/* <button\r\n                        onClick={this.signup}\r\n                        style={{ marginLeft: '25px' }}\r\n                        className=\"btn btn-success\">\r\n                        Signup\r\n                    </button> */}\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport fire from './config/Fire';\r\n\r\nclass Home extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            chars: {}\r\n        }\r\n        this.logout = this.logout.bind(this);\r\n        this.addChar = this.addChar.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentWillMount() {\r\n\r\n        fire.database().ref('chars/' + 'AxT_ShadowSky').set({\r\n            class: 'Paladin',\r\n            accForum: 'IURI ARAUJO'\r\n        });\r\n        fire.database().ref('chars/' + 'Superhero').set({\r\n            class: 'Amazon',\r\n            accForum: 'ezek'\r\n        });\r\n\r\n        const nameRef = fire.database().ref('chars');\r\n\r\n        nameRef.on('value', snapshot => {\r\n            console.log('atualizou');\r\n            this.setState({\r\n                chars: snapshot.val() || {}\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    addChar(e) {\r\n        e.preventDefault();\r\n\r\n        const { newChar, newClass, newAcc } = this.state;\r\n\r\n        console.log('aaa', newChar, newClass, newAcc);\r\n\r\n        fire.database().ref('chars/' + newChar).set({\r\n            class: newClass,\r\n            accForum: newAcc\r\n        });\r\n\r\n        this.setState({\r\n            newChar: '',\r\n            newClass: '',\r\n            newAcc: ''\r\n        });\r\n\r\n    }\r\n\r\n    removeChar(char) {\r\n        fire.database().ref('chars').child(char).remove();\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n\r\n        console.log('this.state', this.state)\r\n    }\r\n\r\n    logout() {\r\n        fire.auth().signOut();\r\n    }\r\n\r\n    render() {\r\n        const { chars } = this.state\r\n        console.log('this.state.chars', chars);\r\n        return (\r\n            <div className=\"col-md-6\">\r\n                <h1>You are home</h1>\r\n                <button onClick={this.logout}>Logout</button>\r\n                <table border=\"1\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Char:</th>\r\n                            <th>Classe:</th>\r\n                            <th>Conta no forum:</th>\r\n                            <th>Ação:</th>\r\n                        </tr>\r\n                        {\r\n                            Object.keys(chars).length ?\r\n                            Object.keys(chars).map((char, i) => {\r\n                                return <tr key={i}>\r\n                                    <td>{char}</td>\r\n                                    <td>{chars[char].class}</td>\r\n                                    <td>{chars[char].accForum}</td>\r\n                                    <td>\r\n                                        <button\r\n                                            onClick={() => this.removeChar(char)}\r\n                                        >Remover</button>\r\n                                    </td>\r\n                                </tr>\r\n                            }) :\r\n                            null\r\n                        }\r\n                        <tr>\r\n                            <td>\r\n                                <input\r\n                                    name=\"newChar\"\r\n                                    value={this.state.newChar}\r\n                                    onChange={this.handleChange} />\r\n                            </td>\r\n                            <td>\r\n                                <select\r\n                                    name=\"newClass\"\r\n                                    value={this.state.newClass}\r\n                                    onChange={this.handleChange}>\r\n                                    <option value=\"\">Selecione a classe</option>\r\n                                    <option value=\"Paladin\">Paladin</option>\r\n                                    <option value=\"Amazon\">Amazon</option>\r\n                                    <option value=\"Sorceress\">Sorceress</option>\r\n                                    <option value=\"Barbarian\">Barbarian</option>\r\n                                    <option value=\"Necromancer\">Necromancer</option>\r\n                                    <option value=\"Druid\">Druid</option>\r\n                                    <option value=\"Assassin\">Assassin</option>\r\n                                </select>\r\n                            </td>\r\n                            <td>\r\n                                <input\r\n                                    name=\"newAcc\"\r\n                                    value={this.state.newAcc}\r\n                                    onChange={this.handleChange} />\r\n                            </td>\r\n                            <td>\r\n                                <button onClick={this.addChar}>Add</button>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport fire from './config/Fire';\r\nimport Login from './Login'\r\nimport Home from './Home'\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: {}\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.authListener();\r\n  }\r\n\r\n  authListener() {\r\n    fire.auth().onAuthStateChanged((user) => {\r\n      console.log(user);\r\n      if (user) {\r\n        this.setState({\r\n          user\r\n        });\r\n        // localStorage.setItem('user', user.uid);\r\n      } else {\r\n        this.setState({\r\n          user: null\r\n        });\r\n        // localStorage.removeItem('user');\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {this.state.user ? (<Home />) : (<Login />)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}